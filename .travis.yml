language: ruby

sudo: true

dist: trusty

rvm:
  - 2.4.2

services:
  - docker

before_install:
  - echo "before_install"

install:
  - echo "install"
  - gem install bundler --no-rdoc --no-ri
  - bundle install

before_script:
  - echo 'before_script'
  # Get a random variable from the awscli and use it through the remainder of the test cycle.
  - export AWS_REGION=$(docker run --env AWS_DEFAULT_REGION=us-east-2 --env AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} --env AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} garland/aws-cli-docker aws ec2 describe-regions --query 'Regions[].{Name:RegionName}' --output text | shuf | head -n1)
  - echo "using AWS_REGION=${AWS_REGION}"
  - export TF_VAR_region=${AWS_REGION}
  - curl --output terraform.zip https://releases.hashicorp.com/terraform/0.11.0/terraform_0.11.0_linux_amd64.zip
  - sha256sum terraform.zip  | grep "402b4333792967986383670134bb52a8948115f83ab6bda35f57fa2c3c9e9279" -q
  - unzip terraform.zip
  - chmod +x terraform
  - mkdir -p ${HOME}/bin
  - export PATH=${PATH}:${HOME}/bin
  - mv terraform ${HOME}/bin/
  - rm -f terraform.zip
  - terraform -v
  - wget https://packages.chef.io/files/current/chefdk/2.4.15/ubuntu/16.04/chefdk_2.4.15-1_amd64.deb
  - sudo dpkg -i chefdk_2.4.15-1_amd64.deb
  - chef gem install bundler
  - chef gem install kitchen-terraform
  - ~/.chefdk/gem/ruby/2.4.0/bin/bundle install

script:
  - echo 'script'
  - terraform init
  - terraform fmt -check=true
  - terraform validate -var "region=${AWS_REGION}" -var "certificate_arn=arn:aws:iam::123456789012:server-certificate/test_cert-123456789012" -var "health_check_path=/" -var "subnets=[]" -var "vpc_id=vpc-abcde012" -var "alb_name=my-alb" -var "alb_security_groups=[]"
  - docker run --rm -v $(pwd):/app/ --workdir=/app/ -t wata727/tflint --error-with-issues
  - cd examples/test_fixtures
  - terraform init
  - terraform fmt -check=true
  - terraform validate
  - cd -
  - terraform -v
  - kitchen test --destroy always

# after_success:
#   - echo 'after_success'

# after_failure:
#   - echo 'after_failure'

before_deploy:
# check if this is new release and conditionally continue?
  - echo 'before_deploy phase'

deploy:
# likely want to publish to the registry
  provider: script
  script: ci/deploy.sh
  on:
    branch: dev

# after_deploy:
# notify of success/failure provide links
#   - echo 'after_deploy'

# after_script:
#   - echo 'after_script'

notifications:
  email:
    recipients:
      - brandon@atscale.run
    on_success: change # default: change
    on_failure: change # default: always
